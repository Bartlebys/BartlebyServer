<?php
/**
* Generated by BARTLEBY'S Flexions for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact) on ?
* https://github.com/Bartlebys
*
* DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
*
* Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
*/

namespace Bartleby\EndPoints;

require_once BARTLEBY_ROOT_FOLDER . 'Core/KeyPath.php';
//require_once BARTLEBY_ROOT_FOLDER.'Core/RunAndLock.php';
require_once BARTLEBY_ROOT_FOLDER.'Core/RunUnlocked.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';
require_once BARTLEBY_PUBLIC_FOLDER . 'Configuration.php';

use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Mongo\MongoCallDataRawWrapper;
use Bartleby\Core\JsonResponse;
use \MongoCollection;
use Bartleby\Configuration;
use Bartleby\Core\KeyPath;
use Closure;
//use Bartleby\Core\RunAndLock;  // To keep the generated code we have replaced RunAndLock by RunUnlocked
use Bartleby\Core\RunUnlocked;

class  ReadLocalizedDataByIdsCallData extends MongoCallDataRawWrapper {
	const ids='ids';
	const result_fields='result_fields';
	/* the sort (MONGO DB) */
	const sort='sort';
}

 class  ReadLocalizedDataByIds extends MongoEndPoint {

     function call() {
        /* @var ReadLocalizedDataByIdsCallData */
        $parameters=$this->getModel();
        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->localizedData;
        $ids=$parameters->getValueForKey(ReadLocalizedDataByIdsCallData::ids);
        $f=$parameters->getValueForKey(ReadLocalizedDataByIdsCallData::result_fields);
        if(isset ($ids) && is_array($ids) && count($ids)){
            $q = array( MONGO_ID_KEY=>array( '$in' => $ids ));
        }else{
            return new JsonResponse(VOID_RESPONSE,204);
        }
        try {
            $r=array();
            if(isset($f)){
                $cursor = $collection->find( $q , $f );
            }else{
                $cursor = $collection->find($q);
            }
           
            // Sort ?
            $s=$parameters->getCastedDictionaryForKey(ReadLocalizedDataByIdsCallData::sort);
            if (isset($s) && count($s)>0){
              $cursor=$cursor->sort($s);
            }
            
            if ($cursor->count ( TRUE ) > 0) {
               foreach ( $cursor as $obj ) {
                $r[] = $obj;
               }
            }
            
            if (count($r)==count($ids)) {
                //All the entity has been found.
                return new JsonResponse($r,200);
            } else {
                $foundIds=array();
                $notFoundIds=array();
                foreach ($r as $o) {
                    if (array_key_exists('_id', $r)) {
                        $id = $o['_id'];
                        $foundIds[] = $id;
                    }
                }
                foreach ($ids as $id) {
                    if ( !in_array($id,$foundIds)){
                        $notFoundIds=$id;
                    }
                }
                $details=array('found'=>$r,'notFound'=>$notFoundIds);
                return new JsonResponse($details,404);
            }
            
        } catch ( \Exception $e ) {
            return new JsonResponse( [  'code'=>$e->getCode(),
                                    'message'=>$e->getMessage(),
                                    'file'=>$e->getFile(),
                                    'line'=>$e->getLine(),
                                    'trace'=>$e->getTraceAsString()
                                  ],
                                  417
                                );
            }
    }
}
?>